{"version":3,"sources":["components/searchBox.js","components/display.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","className","placeholder","Display","weatherData","name","country","region","temperature","description","src","icon","alt","App","useState","lat","setLat","lon","setLon","setWeatherData","useEffect","navigator","geolocation","getCurrentPosition","loc","coords","latitude","longitude","console","log","a","axios","response","data","results","location","current","temp_c","condition","text","humidity","fetchData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAgBeA,EAdG,WAChB,OACE,sBAAKC,UAAU,8CAAf,UACE,uBACEC,YAAY,YACZD,UAAU,+FAEZ,wBAAQA,UAAU,mJAAlB,wBCmBSE,EAzBC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjB,OACE,gCACE,qBAAKH,UAAU,oEAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,+CAAf,SACE,sBAAKA,UAAU,wBAAf,UACE,6BAAKG,EAAYC,OACjB,+BACGD,EAAYE,QADf,KAC0BF,EAAYG,OAAQ,OAE9C,gCACE,+BAAKH,EAAYI,YAAjB,WACA,6BAAKJ,EAAYK,iBAEnB,8BACE,qBAAKC,IAAKN,EAAYO,KAAMC,IAAI,oB,iBCiC7BC,G,MAhDH,WACV,IACA,EAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAsBF,mBAAS,GAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOV,EAAP,KAAoBe,EAApB,KA8BA,OA5BAC,qBAAU,YACRC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCR,EAAOQ,EAAIC,OAAOC,UAClBR,EAAOM,EAAIC,OAAOE,WAClBC,QAAQC,IAAId,EAAKE,MAEP,IAARF,GAAqB,IAARE,IACA,uCAAG,8BAAAa,EAAA,sEACOC,IAAM,mDAAD,OAbnB,iCAamB,cACqChB,EADrC,YAC4CE,IAFxD,OACVe,EADU,OAIhBJ,QAAQC,IAAIG,EAASC,MACfC,EAAUF,EAASC,KACzBd,EAAe,CACbd,KAAM6B,EAAQC,SAAS9B,KACvBC,QAAS4B,EAAQC,SAAS7B,QAC1BC,OAAQ2B,EAAQC,SAAS5B,OACzBC,YAAa0B,EAAQE,QAAQC,OAC7B5B,YAAayB,EAAQE,QAAQE,UAAUC,KACvC5B,KAAMuB,EAAQE,QAAQE,UAAU3B,KAChC6B,SAAUN,EAAQE,QAAQI,WAE5BZ,QAAQC,IAAIzB,GAfI,2CAAH,oDAiBfqC,KAED,CAAC1B,EAAKE,IAGP,gCACE,qBAAKhB,UAAU,OAAf,SACE,oBAAIA,UAAU,oFAAd,2BAIF,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,CAASG,YAAaA,WCnCfsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e791f4d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = () => {\r\n  return (\r\n    <div className='   flex justify-center items-center w-2/3  '>\r\n      <input\r\n        placeholder='City Name'\r\n        className='bg-white p-3 m-2 w-8/12 border-4 border-blue-500 border-opacity-50 shadow-xl outline-none '\r\n      />\r\n      <button className='inline-flex text-white hover:text-blue-500 bg-blue-500 hover:bg-white rounded-lg text-center h-auto w-auto p-3 m-2 search-btn focus:outline-none'>\r\n        Search\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport SearchBox from './searchBox';\r\n\r\nconst Display = ({ weatherData }) => {\r\n  return (\r\n    <div>\r\n      <div className=' flex justify-center items-center bg-yellow-100 h-24 outline-none'>\r\n        <SearchBox />\r\n      </div>\r\n      <div className='container flex justify-center items-center  '>\r\n        <div className='bg-yellow-300 w-10/12'>\r\n          <h1>{weatherData.name}</h1>\r\n          <h2>\r\n            {weatherData.country}, {weatherData.region}{' '}\r\n          </h2>\r\n          <div>\r\n            <h2>{weatherData.temperature}Â°c</h2>\r\n            <h3>{weatherData.description}</h3>\r\n          </div>\r\n          <div>\r\n            <img src={weatherData.icon} alt='icon' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React, { useState, useEffect } from 'react';\nimport Display from './components/display';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const apiKey = '37039385b60f47fdaff90331211806';\n  const [lat, setLat] = useState(0);\n  const [lon, setLon] = useState(0);\n  const [weatherData, setWeatherData] = useState({});\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((loc) => {\n      setLat(loc.coords.latitude);\n      setLon(loc.coords.longitude);\n      console.log(lat, lon);\n    });\n    if (lat !== 0 && lon !== 0) {\n      const fetchData = async () => {\n        const response = await axios(\n          ` https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}`\n        );\n        console.log(response.data);\n        const results = response.data;\n        setWeatherData({\n          name: results.location.name,\n          country: results.location.country,\n          region: results.location.region,\n          temperature: results.current.temp_c,\n          description: results.current.condition.text,\n          icon: results.current.condition.icon,\n          humidity: results.current.humidity,\n        });\n        console.log(weatherData);\n      };\n      fetchData();\n    }\n  }, [lat, lon]);\n\n  return (\n    <div>\n      <div className='p-4 '>\n        <h1 className='app-title text-6xl font-bold text-blue-500  flex justify-center items-center h-28'>\n          Weather App\n        </h1>\n      </div>\n      <div className='h-auto '>\n        <Display weatherData={weatherData} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}