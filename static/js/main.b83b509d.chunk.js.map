{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","lat","setLat","lon","setLon","weatherData","setWeatherData","useEffect","navigator","geolocation","getCurrentPosition","loc","coords","latitude","longitude","console","log","a","axios","response","data","results","name","location","country","region","temperature","current","temp_c","description","condition","text","icon","humidity","fetchData","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAsDeA,EAnDH,WACV,IACA,EAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAsBF,mBAAS,GAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAsCJ,qBAAtC,mBAAOK,EAAP,KAAoBC,EAApB,KA8BA,OA5BAC,qBAAU,YACRC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCT,EAAOS,EAAIC,OAAOC,UAClBT,EAAOO,EAAIC,OAAOE,WAClBC,QAAQC,IAAIf,EAAKE,MAEP,IAARF,GAAqB,IAARE,IACA,uCAAG,8BAAAc,EAAA,sEACOC,IAAM,kDAAD,OAbnB,iCAamB,cACoCjB,EADpC,YAC2CE,IAFvD,OACVgB,EADU,OAIhBJ,QAAQC,IAAIG,EAASC,MACfC,EAAUF,EAASC,KACzBd,EAAe,CACbgB,KAAMD,EAAQE,SAASD,KACvBE,QAASH,EAAQE,SAASC,QAC1BC,OAAQJ,EAAQE,SAASE,OACzBC,YAAaL,EAAQM,QAAQC,OAC7BC,YAAaR,EAAQM,QAAQG,UAAUC,KACvCC,KAAMX,EAAQM,QAAQG,UAAUE,KAChCC,SAAUZ,EAAQM,QAAQM,WAE5BlB,QAAQC,IAAIX,GAfI,2CAAH,oDAiBf6B,KAED,CAACjC,EAAKE,IAGP,gCACE,6CACA,0DAC2BF,EAD3B,gBAC6CE,KAE7C,+BACE,yCAAYE,EAAYiB,QACxB,4CAAejB,EAAYmB,WAC3B,gDAAmBnB,EAAYqB,eAC/B,gDAAmBrB,EAAYwB,kBAEjC,qBAAKM,IAAK9B,EAAY2B,KAAMI,IAAI,aCrCvBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b83b509d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n  const apiKey = '37039385b60f47fdaff90331211806';\n  const [lat, setLat] = useState(0);\n  const [lon, setLon] = useState(0);\n  const [weatherData, setWeatherData] = useState();\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((loc) => {\n      setLat(loc.coords.latitude);\n      setLon(loc.coords.longitude);\n      console.log(lat, lon);\n    });\n    if (lat !== 0 && lon !== 0) {\n      const fetchData = async () => {\n        const response = await axios(\n          ` http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}`\n        );\n        console.log(response.data);\n        const results = response.data;\n        setWeatherData({\n          name: results.location.name,\n          country: results.location.country,\n          region: results.location.region,\n          temperature: results.current.temp_c,\n          description: results.current.condition.text,\n          icon: results.current.condition.icon,\n          humidity: results.current.humidity,\n        });\n        console.log(weatherData);\n      };\n      fetchData();\n    }\n  }, [lat, lon]);\n\n  return (\n    <div>\n      <h1>Weather App</h1>\n      <h3>\n        Coordinates : latitude= {lat}, longitude= {lon}\n      </h3>\n      <ul>\n        <li>Name : {weatherData.name}</li>\n        <li>Country : {weatherData.country}</li>\n        <li>Temperature : {weatherData.temperature}</li>\n        <li>description : {weatherData.description}</li>\n      </ul>\n      <img src={weatherData.icon} alt='Icon' />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}